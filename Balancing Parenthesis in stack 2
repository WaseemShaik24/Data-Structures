#include <stdio.h>
#include <stdbool.h>
#include <string.h>

bool isValid(char* s) {
    int len = strlen(s);
    char stack[len];
    int top = -1;
    
    for (int i = 0; i < len; i++) {
        if (s[i] == '(' || s[i] == '{' || s[i] == '[') {
            stack[++top] = s[i];
        } else if (s[i] == ')' || s[i] == '}' || s[i] == ']') {
            if (top == -1) {
                return false;
            } else if ((s[i] == ')' && stack[top] == '(') ||
                       (s[i] == '}' && stack[top] == '{') ||
                       (s[i] == ']' && stack[top] == '[')) {
                top--;
            } else {
                return false;
            }
        }
    }
    
    return top == -1;
}

int main() {
    char s1[] = "()";
    char s2[] = "()[]{}";
    char s3[] = "(]";
    char s4[] = "([)]";
    char s5[] = "{[]}";
    
    printf("Input: %s\nOutput: %s\n", s1, isValid(s1) ? "true" : "false");
    printf("Input: %s\nOutput: %s\n", s2, isValid(s2) ? "true" : "false");
    printf("Input: %s\nOutput: %s\n", s3, isValid(s3) ? "true" : "false");
    printf("Input: %s\nOutput: %s\n", s4, isValid(s4) ? "true" : "false");
    printf("Input: %s\nOutput: %s\n", s5, isValid(s5) ? "true" : "false");
    
    return 0;
}
