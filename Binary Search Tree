#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *left, *right;
};

struct Node *createNode(int value) {
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed.\n");
        exit(1);
    }
    newNode->data = value;
    newNode->left = newNode->right = NULL;
    return newNode;
}

struct Node *insert(struct Node *root, int value) {
    if (root == NULL) return createNode(value);
    if (value < root->data)
        root->left = insert(root->left, value);
    else if (value > root->data)
        root->right = insert(root->right, value);
    return root;
}

struct Node *deleteNode(struct Node *root, int value) {
    if (root == NULL) return root;
    if (value < root->data)
        root->left = deleteNode(root->left, value);
    else if (value > root->data)
        root->right = deleteNode(root->right, value);
    else {
        if (root->left == NULL) {
            struct Node *temp = root->right;
            free(root);
            return temp;
        } else if (root->right == NULL) {
            struct Node *temp = root->left;
            free(root);
            return temp;
        }
        struct Node *temp = root->right;
        while (temp->left != NULL)
            temp = temp->left;
        root->data = temp->data;
        root->right = deleteNode(root->right, temp->data);
    }
    return root;
}

struct Node *search(struct Node *root, int value) {
    if (root == NULL || root->data == value)
        return root;
    if (value < root->data)
        return search(root->left, value);
    return search(root->right, value);
}

struct Node *findMinValueNode(struct Node *node) {
    while (node && node->left != NULL)
        node = node->left;
    return node;
}

struct Node *findMaxValueNode(struct Node *node) {
    while (node && node->right != NULL)
        node = node->right;
    return node;
}

void inorder(struct Node *root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}

int main() {
    struct Node *root = NULL;
    root = insert(root, 50);
    insert(root, 30), insert(root, 20), insert(root, 40);
    insert(root, 70), insert(root, 60), insert(root, 80);

    printf("Inorder Traversal (BST): ");
    inorder(root);
    printf("\n");

    int searchValue = 40;
    struct Node *searchResult = search(root, searchValue);
    printf("%d found in BST: %s\n", searchValue, searchResult ? "Yes" : "No");

    printf("Minimum value in BST: %d\n", findMinValueNode(root)->data);
    printf("Maximum value in BST: %d\n", findMaxValueNode(root)->data);

    int deleteValue = 30;
    root = deleteNode(root, deleteValue);
    printf("Inorder Traversal after deletion of %d: ", deleteValue);
    inorder(root);
    printf("\n");

    return 0;
}
