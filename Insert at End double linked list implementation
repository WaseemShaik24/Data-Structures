#include <stdio.h>
#include <stdlib.h>

// Node structure for doubly linked list
struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
};

// Function to create a new node with given data
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->prev = NULL;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the end of the doubly linked list
void insertAtEnd(struct Node** headRef, int data) {
    struct Node* new_node = createNode(data);
    struct Node* last = *headRef;

    // If the list is empty, make the new node the head of the list
    if (*headRef == NULL) {
        *headRef = new_node;
        return;
    }

    // Traverse the list to find the last node
    while (last->next != NULL) {
        last = last->next;
    }

    // Update pointers to insert the new node at the end
    last->next = new_node;
    new_node->prev = last;
}

// Function to display the contents of the doubly linked list
void display(struct Node* head) {
    struct Node* current = head;
    printf("NULL <-> ");
    while (current != NULL) {
        printf("%d <-> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

// Main function to demonstrate the usage of the doubly linked list
int main() {
    struct Node* head = NULL;

    // Insert nodes at the end of the list
    insertAtEnd(&head, 5);
    insertAtEnd(&head, 10);
    insertAtEnd(&head, 15);

    // Display the doubly linked list
    printf("Doubly Linked List:\n");
    display(head);

    return 0;
}
