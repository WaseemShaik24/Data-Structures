#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 10

struct Deque {
    int data[MAX_SIZE];
    int front;
    int rear;
};

void initializeDeque(struct Deque *deque) {
    deque->front = -1;
    deque->rear = -1;
}

int isFull(struct Deque *deque) {
    return (deque->front == 0 && deque->rear == MAX_SIZE - 1) || (deque->front == deque->rear + 1);
}

int isEmpty(struct Deque *deque) {
    return deque->front == -1;
}

void insertFront(struct Deque *deque, int value) {
    if (isFull(deque)) {
        printf("Deque is full. Insertion not possible.\n");
        return;
    }

    if (isEmpty(deque)) {
        deque->front = 0;
        deque->rear = 0;
    } else if (deque->front == 0) {
        deque->front = MAX_SIZE - 1;
    } else {
        deque->front--;
    }

    deque->data[deque->front] = value;
    printf("Insertion at the front successful: %d\n", value);
}

void insertRear(struct Deque *deque, int value) {
    if (isFull(deque)) {
        printf("Deque is full. Insertion not possible.\n");
        return;
    }

    if (isEmpty(deque)) {
        deque->front = 0;
        deque->rear = 0;
    } else if (deque->rear == MAX_SIZE - 1) {
        deque->rear = 0;
    } else {
        deque->rear++;
    }

    deque->data[deque->rear] = value;
    printf("Insertion at the rear successful: %d\n", value);
}

void deleteFront(struct Deque *deque) {
    if (isEmpty(deque)) {
        printf("Deque is empty. Deletion not possible.\n");
        return;
    }

    printf("Deleted from the front: %d\n", deque->data[deque->front]);

    if (deque->front == deque->rear) {
        initializeDeque(deque);
    } else if (deque->front == MAX_SIZE - 1) {
        deque->front = 0;
    } else {
        deque->front++;
    }
}

void deleteRear(struct Deque *deque) {
    if (isEmpty(deque)) {
        printf("Deque is empty. Deletion not possible.\n");
        return;
    }

    printf("Deleted from the rear: %d\n", deque->data[deque->rear]);

    if (deque->front == deque->rear) {
        initializeDeque(deque);
    } else if (deque->rear == 0) {
        deque->rear = MAX_SIZE - 1;
    } else {
        deque->rear--;
    }
}

void displayDeque(struct Deque *deque) {
    if (isEmpty(deque)) {
        printf("Deque is empty.\n");
        return;
    }

    printf("Deque elements: ");
    int i = deque->front;

    do {
        printf("%d ", deque->data[i]);

        if (i == MAX_SIZE - 1) {
            i = 0;
        } else {
            i++;
        }
    } while (i != (deque->rear + 1) % MAX_SIZE);

    printf("\n");
}

int main() {
    struct Deque deque;
    initializeDeque(&deque);

    insertRear(&deque, 10);
    insertRear(&deque, 20);
    insertFront(&deque, 5);
    insertFront(&deque, 15);

    displayDeque(&deque);

    deleteFront(&deque);
    deleteRear(&deque);

    displayDeque(&deque);

    return 0;
}
